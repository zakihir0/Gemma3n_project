#%%
# Vision Fine-tuning for plnat Classification - CLAUDE.md Based

!pip uninstall -y pygobject gradient gradient-utils
!pip install --no-cache-dir --upgrade packaging==24.2
!pip install --no-deps bitsandbytes accelerate xformers==0.0.29.post3 peft trl triton cut_cross_entropy unsloth_zoo
!pip install --upgrade bitsandbytes
!pip install triton==3.2.0
!pip install pip3-autoremove
!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124
!pip install unsloth
!pip install faiss-cpu
!pip install sentence-transformers
!pip install wikipedia
!pip install --no-deps git+https://github.com/huggingface/transformers.git
!pip install --no-deps --upgrade timm
!pip uninstall -y deepspeed
!pip install deepspeed==0.14.4
!pip install wandb==0.17.9

#%%
import os
import random
import pandas as pd
import json
from typing import List
from collections import defaultdict
from torchvision import datasets
from unsloth import FastModel, is_bf16_supported, FastVisionModel
from unsloth.trainer import UnslothVisionDataCollator
from trl import SFTTrainer
from transformers import TrainingArguments, Trainer
import wandb
from PIL import Image
from IPython.display import display, Image as IPImage

os.environ["CUDA_VISIBLE_DEVICES"] = "0, 1"
os.environ["WANDB_API_KEY"] = "abd0ce2837eca439d66f6c603136603c1729cd3e"

#%%
# Initialize WandB with environment variable login
wandb.login(key=os.getenv("WANDB_API_KEY"))

wandb.init(
    project="gemma3n-plant-classification",
    name="vision-finetuning-experiment",
    config={
        "model_name": "unsloth/gemma-3n-E2B-it",
        "max_seq_length": 1024,
        "load_in_4bit": True,
        "max_files_per_class_train": 10000,
        "max_files_per_class_val": 50,
        "max_val_samples_for_sft": 200,
        "lora_rank": 32,
        "lora_alpha": 64,
        "learning_rate": 1e-4,
        "max_steps": 300,
        "eval_steps": 30,
        "per_device_train_batch_size": 8,
        "per_device_eval_batch_size": 8,
        "gradient_accumulation_steps": 8,
    }
)

# Load the model (exactly as in CLAUDE.md)
model, tokenizer = FastModel.from_pretrained(
    model_name = "unsloth/gemma-3n-E2B-it",
    dtype = None,
    max_seq_length = 1024,
    load_in_4bit = True,
    full_finetuning = False,
)

#%%
# Data loading using existing train/valid split
base_dir = '/notebooks/kaggle/input/new_plant_diseases/2/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)'
train_dir = os.path.join(base_dir, 'train')
valid_dir = os.path.join(base_dir, 'valid')

# Dataset size configuration
max_files_per_class_train = 10000  # Training data limit
max_files_per_class_val = 50       # Validation data limit (small for faster evaluation)

print(f"📊 Dataset configuration:")
print(f"   Training: max {max_files_per_class_train} files per class")
print(f"   Validation: max {max_files_per_class_val} files per class")

def load_dataset_from_dir(root_dir, max_files_per_class=None):
    """Load dataset from directory with optional file limit per class"""
    classes = []
    paths = []
    class_file_counts = {}
    
    for dirname, _, filenames in os.walk(root_dir):
        class_name = dirname.split('/')[-1]
        if class_name == os.path.basename(root_dir):  # Skip root directory
            continue
            
        if class_name not in class_file_counts:
            class_file_counts[class_name] = 0
        
        for filename in filenames:
            if max_files_per_class is None or class_file_counts[class_name] < max_files_per_class:
                if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
                    full_path = os.path.join(dirname, filename)
                    if os.path.exists(full_path):
                        classes.append(class_name)
                        paths.append(full_path)
                        class_file_counts[class_name] += 1
    
    return classes, paths, class_file_counts

# Load train and validation datasets separately with different limits
train_classes, train_paths, train_counts = load_dataset_from_dir(train_dir, max_files_per_class_train)
val_classes, val_paths, val_counts = load_dataset_from_dir(valid_dir, max_files_per_class_val)

# Get unified class names from ImageFolder for consistency
train_dataset_folder = datasets.ImageFolder(root=train_dir)
class_names = train_dataset_folder.classes
print(f"Class names: {class_names}")
print(f"Number of classes: {len(class_names)}")

# Create mapping
N = list(range(len(class_names)))
normal_mapping = dict(zip(class_names, N))
reverse_mapping = dict(zip(N, class_names))

# Create train dataset
train_dataset = []
for path, class_name in zip(train_paths, train_classes):
    train_dataset.append({"path": path, "class": class_name})

# Create validation dataset
val_dataset = []
for path, class_name in zip(val_paths, val_classes):
    val_dataset.append({"path": path, "class": class_name})

print(f"Training samples: {len(train_dataset)}")
print(f"Validation samples: {len(val_dataset)}")
print(f"Train class distribution: {train_counts}")
print(f"Val class distribution: {val_counts}")

# テキスト指示は不要 - Vision分類では画像のみを使用

#%%
# Vision分類用のデータセット処理
def process_vision_dataset(dataset, dataset_name, class_names):
    """Vision分類用にデータセットを処理（画像とクラスIDのペア）"""
    processed_dataset = []
    normal_mapping = {cls: idx for idx, cls in enumerate(class_names)}
    
    for sample in dataset:
        try:
            # 画像を読み込み
            image = Image.open(sample["path"])
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # クラス名をIDに変換
            class_id = normal_mapping[sample["class"]]
            
            processed_dataset.append({
                "image": image,
                "labels": class_id  # クラスID (int)
            })
            
        except Exception as e:
            print(f"❌ Error processing {dataset_name} sample {sample['path']}: {e}")
    
    return processed_dataset

# Vision分類用データセット作成
train_vision_dataset = process_vision_dataset(train_dataset, "training", class_names)
print(f"✅ Converted {len(train_vision_dataset)} training samples for vision classification")

val_vision_dataset = process_vision_dataset(val_dataset, "validation", class_names)
print(f"✅ Converted {len(val_vision_dataset)} validation samples for vision classification")

# 従来のconversation形式の処理は削除 - Vision分類のみを使用

# Show sample from vision dataset
print("\n📋 Sample vision dataset entry:")
print(f"Image path: {train_vision_dataset[0]['image']}")
print(f"Label: {train_vision_dataset[0]['labels']} (class: {class_names[train_vision_dataset[0]['labels']]})")

print(f"\n📊 Final dataset split:")
print(f"   Training samples: {len(train_vision_dataset)}")
print(f"   Validation samples: {len(val_vision_dataset)}")
print(f"   Validation ratio: {len(val_vision_dataset)/len(train_vision_dataset):.2%}")

#%%
# Vision Fine-tuning - Linear head only
print("\n🚀 Starting Vision Fine-tuning (Linear head only)...")

import torch
import torch.nn.functional as F

import torch.nn as nn
from transformers import Trainer
from torch.utils.data import DataLoader
from transformers.modeling_outputs import SequenceClassifierOutput
import numpy as np
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from transformers import TrainerCallback


def ConvBlock(in_channels, out_channels, pool=False):
    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
             nn.BatchNorm2d(out_channels),
             nn.ReLU(inplace=True)]
    if pool:
        layers.append(nn.MaxPool2d(4))
    return nn.Sequential(*layers)

class ClearMemoryCallback(TrainerCallback):
    """Callback that frees CUDA cache every `clear_every_n_steps` training steps."""
    def __init__(self, clear_every_n_steps: int = 50):
        self.clear_every_n_steps = clear_every_n_steps

    def on_step_end(self, args, state, control, **kwargs):
        if state.global_step and state.global_step % self.clear_every_n_steps == 0:
            torch.cuda.empty_cache()
            torch.cuda.ipc_collect()
        return control

class VisionCNNClassifier(nn.Module):
    """Vision Tower特徴量 → CNN分類器のアーキテクチャ"""
    def __init__(self, vision_model, num_classes, hidden_dim):
        super().__init__()
        self.vision_model = vision_model
        self.hidden_dim = hidden_dim
        
        # Vision Towerの特徴量をfreezeする
        for param in self.vision_model.parameters():
            param.requires_grad = False
        
        # CNN分類器 (hidden_dimをin_channelsとして使用)
        self.conv1 = ConvBlock(hidden_dim, 64)
        self.conv2 = ConvBlock(64, 128, pool=True) 
        self.res1 = nn.Sequential(ConvBlock(128, 128), ConvBlock(128, 128))
        
        self.conv3 = ConvBlock(128, 256, pool=True) 
        self.conv4 = ConvBlock(256, 512, pool=True)
        
        self.res2 = nn.Sequential(ConvBlock(512, 512), ConvBlock(512, 512))
        # 64x64 → conv2(16x16) → conv3(4x4) → conv4(1x1) になるため
        # 1x1テンソルなのでMaxPool2dは不要、直接Flattenする
        self.classifier = nn.Sequential(nn.Flatten(),
                                       nn.Linear(512, num_classes))
    
    def extract_vision_features(self, pixel_values):
        """Vision Towerから特徴量を抽出し、CNN用の形状に変換"""
        with torch.no_grad():  # Vision Towerはfreezeされているのでgradient不要
            vision_output = self.vision_model(pixel_values)
            vision_features = vision_output.last_hidden_state
        
        # vision_featuresの形状を確認して、CNNが期待する形状に変換
        if len(vision_features.shape) == 3:
            # (B, seq_len, hidden_dim) -> spatial dimensionに変換
            B, seq_len, hidden_dim = vision_features.shape
            # seq_lenが完全平方数であることを仮定して、spatial dimensionに再形成
            spatial_size = int(seq_len ** 0.5)
            if spatial_size * spatial_size == seq_len:
                # (B, hidden_dim, H, W) 形式に変換
                vision_features = vision_features.transpose(1, 2).reshape(B, hidden_dim, spatial_size, spatial_size)
            else:
                # 完全平方数でない場合は、適当なサイズに調整
                spatial_size = int(seq_len ** 0.5) + 1
                pad_size = spatial_size * spatial_size - seq_len
                if pad_size > 0:
                    padding = torch.zeros(B, pad_size, hidden_dim, device=vision_features.device)
                    vision_features = torch.cat([vision_features, padding], dim=1)
                vision_features = vision_features.transpose(1, 2).reshape(B, hidden_dim, spatial_size, spatial_size)
        elif len(vision_features.shape) == 4:
            # 既に (B, C, H, W) 形式
            pass
        else:
            raise ValueError(f"Unexpected vision_features shape: {vision_features.shape}")
        
        # AdaptiveAvgPool2dでCNNに適したサイズにリサイズ（64x64に設定）
        adaptive_pool = nn.AdaptiveAvgPool2d((64, 64))
        vision_features = adaptive_pool(vision_features)
        
        return vision_features
    
    def forward(self, pixel_values, **kwargs):
        """ImageClassificationBaseと互換性のあるforward method"""
        # Vision Towerから特徴量を抽出
        vision_features = self.extract_vision_features(pixel_values)
        
        # CNN layers through the network
        out = self.conv1(vision_features)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        
        return out

# ID/Label変換ユーティリティ関数
def id_to_label(class_id, class_names_list=None):
    """クラスIDをクラス名に変換
    
    Args:
        class_id (int): クラスID (0 ~ len(class_names)-1)
        class_names_list (list, optional): クラス名リスト。Noneの場合はグローバルのclass_namesを使用
    
    Returns:
        str: クラス名
    """
    if class_names_list is None:
        class_names_list = class_names
    return class_names_list[class_id]

def ids_to_labels(class_ids, class_names_list=None):
    """クラスIDリスト/配列をクラス名リストに変換
    
    Args:
        class_ids (list/array): クラスIDのリストまたは配列
        class_names_list (list, optional): クラス名リスト。Noneの場合はグローバルのclass_namesを使用
    
    Returns:
        list: クラス名のリスト
    """
    if class_names_list is None:
        class_names_list = class_names
    return [class_names_list[id] for id in class_ids]

def get_top_k_predictions(logits, k=3, class_names_list=None):
    """logitsからTop-K予測とその確信度を返す
    
    Args:
        logits (torch.Tensor): モデルの出力logits (batch_size, num_classes)
        k (int): 上位何個まで取得するか
        class_names_list (list, optional): クラス名リスト。Noneの場合はグローバルのclass_namesを使用
    
    Returns:
        list: バッチ内各サンプルのTop-K予測結果
              [{'class_id': int, 'class_name': str, 'confidence': float}, ...]
    """
    import torch
    
    if class_names_list is None:
        class_names_list = class_names
    
    # logitsが1次元の場合(単一サンプル)は2次元に変換
    if len(logits.shape) == 1:
        logits = logits.unsqueeze(0)
    
    # 確率に変換してTop-K取得
    probs = torch.softmax(logits, dim=-1)
    top_k_probs, top_k_ids = torch.topk(probs, k, dim=-1)
    
    results = []
    for i in range(len(top_k_ids)):
        predictions = []
        for j in range(k):
            class_id = top_k_ids[i][j].item()
            confidence = top_k_probs[i][j].item()
            class_name = class_names_list[class_id]
            predictions.append({
                'class_id': class_id,
                'class_name': class_name,
                'confidence': confidence
            })
        results.append(predictions)
    
    return results

# スマート適応的予測システム
def do_gemma_3n_inference(messages, max_new_tokens=128):
    """Vision生成機能 - CLAUDE.mdから復活"""
    inputs = tokenizer.apply_chat_template(
        messages,
        add_generation_prompt=True,
        tokenize=True,
        return_dict=True,
        return_tensors="pt",
    ).to("cuda")
    
    # 常に出力をキャプチャして返す
    outputs = model.generate(
        **inputs,
        max_new_tokens=max_new_tokens,
        temperature=1.0, top_p=0.95, top_k=64,
        do_sample=True,
        pad_token_id=tokenizer.eos_token_id,
    )
    # 新しく生成されたトークンのみを抽出
    response_tokens = outputs[0][inputs['input_ids'].shape[1]:]
    response_text = tokenizer.decode(response_tokens, skip_special_tokens=True)
    return response_text

def check_if_plant_disease_image(image):
    """Vision生成機能で植物病気関連画像かを判定"""
    messages = [
        {"role": "user", 
         "content": [
             {"type": "text", "text": "Is this image related to plant diseases or plant health issues? Answer only 'YES' or 'NO' and briefly explain why."},
             {"type": "image", "image": image}
         ]}
    ]
    
    # Vision生成で判定
    response = do_gemma_3n_inference(messages, max_new_tokens=50)
    
    # 'YES'が含まれているかをチェック
    is_plant_disease = 'YES' in response.upper()
    
    return is_plant_disease, response

def generate_detailed_description(image):
    """一般画像の詳細説明生成"""
    messages = [
        {"role": "user", 
         "content": [
             {"type": "text", "text": "Describe accurately and in detail what you see in this image."},
             {"type": "image", "image": image}
         ]}
    ]
    
    return do_gemma_3n_inference(messages, max_new_tokens=150)

def smart_predict_image(image):
    """
    スマート予測: Classifier → 信頼度チェック → 必要時Vision判定
    
    Args:
        image: PIL Image
    
    Returns:
        dict: 予測結果辞書
    """
    # データコレーターを使用してpixel_valuesを準備
    test_sample = {"image": image, "labels": 0}  # ダミーラベル
    batch = vision_trainer.data_collator([test_sample])
    pixel_values = batch["pixel_values"].to("cuda")
    
    # Step 1: Classifierで予測
    with torch.no_grad():
        logits = vision_classifier(pixel_values=pixel_values)
        top_predictions = get_top_k_predictions_local(logits, k=3)
        max_confidence = top_predictions[0][0]['confidence']
    
    print(f"🔍 Classifier予測: {top_predictions[0][0]['class_name']} (信頼度: {max_confidence:.1%})")
    
    # Step 2: 信頼度チェック
    if max_confidence >= 0.7:  # 高信頼度
        print("✅ 高信頼度のため、Classifier結果を採用")
        return {
            'prediction': top_predictions[0][0]['class_name'],
            'confidence': max_confidence,
            'method': 'classifier',
            'reason': f'高信頼度 ({max_confidence:.1%})',
            'top_alternatives': top_predictions[0][:3]
        }
    else:
        # Step 3: Vision生成で植物病気関連かを判定
        print("🤔 信頼度が低いため、Vision生成で画像内容を確認中...")
        is_plant_disease, vision_response = check_if_plant_disease_image(image)
        print(f"🧠 Vision判定: {'植物病気関連' if is_plant_disease else '植物病気以外'}")
        print(f"📝 Vision応答: {vision_response}")
        
        if is_plant_disease:
            # 植物病気関連 → Classifierの結果を使用
            print("🌱 植物病気と確認されたため、Classifier結果を採用")
            return {
                'prediction': top_predictions[0][0]['class_name'],
                'confidence': max_confidence,
                'method': 'classifier_confirmed',
                'reason': f'Vision生成により植物病気と確認 (分類信頼度: {max_confidence:.1%})',
                'top_alternatives': top_predictions[0][:3],
                'vision_confirmation': True,
                'vision_response': vision_response
            }
        else:
            # 植物病気関連でない → Vision生成で詳細説明
            print("📝 一般画像として、Vision生成で詳細説明を作成中...")
            description = generate_detailed_description(image)
            return {
                'description': description,
                'method': 'vision_generation',
                'reason': 'Vision生成により植物病気以外と判定',
                'confidence': 0.8,  # 生成ベース
                'vision_analysis': True,
                'vision_response': vision_response
            }

def compute_vision_metrics(eval_pred):
    """Vision分類用の評価メトリクス"""
    predictions, labels = eval_pred
    
    # predictions は logits の形 (batch_size, num_classes)
    pred_ids = np.argmax(predictions, axis=1)
    
    # 基本的なメトリクス
    accuracy = accuracy_score(labels, pred_ids)
    
    # Top-3 accuracy
    top3_preds = np.argsort(predictions, axis=1)[:, -3:]
    top3_accuracy = np.mean([label in top3_preds[i] for i, label in enumerate(labels)])
    
    # クラス別精度 (各クラスのrecall)
    cm = confusion_matrix(labels, pred_ids)
    class_accuracies = cm.diagonal() / cm.sum(axis=1)
    class_accuracies = np.nan_to_num(class_accuracies)  # 0で割った場合のNaNを0に変換
    
    metrics = {
        'accuracy': accuracy,
        'top3_accuracy': top3_accuracy,
        'mean_class_accuracy': np.mean(class_accuracies),
        'min_class_accuracy': np.min(class_accuracies),
        'max_class_accuracy': np.max(class_accuracies),
        'median_class_accuracy': np.median(class_accuracies),
        'std_class_accuracy': np.std(class_accuracies),
    }
    
    return metrics

class VisionTrainer(Trainer):
    """Vision分類用の軽量Trainer - compute_metricsを妨げない"""
    
    def compute_loss(self, model, inputs, return_outputs=False, **kwargs):
        pixel_values = inputs.get('pixel_values')
        labels = inputs.get('labels')
        
        # モデルのforward()でlogitsを取得
        logits = model(pixel_values)
        
        # Cross entropy lossを計算
        loss = F.cross_entropy(logits, labels)
        
        if return_outputs:
            # Trainerが期待する形式でoutputsを返す
            outputs = type('ModelOutput', (), {
                'loss': loss,
                'logits': logits,
            })()
            return loss, outputs
        return loss
    
    def prediction_step(self, model, inputs, prediction_loss_only, ignore_keys=None):
        """評価時の予測ステップをオーバーライド"""
        pixel_values = inputs.get('pixel_values')
        labels = inputs.get('labels')
        
        with torch.no_grad():
            # モデルの予測を取得
            logits = model(pixel_values)
            loss = F.cross_entropy(logits, labels)
        
        # prediction_loss_onlyがTrueの場合はlossのみ返す
        if prediction_loss_only:
            return (loss, None, None)
        
        # compute_metricsで使用するため、logitsとlabelsを返す
        return (loss, logits, labels)

# Vision分類用のデータコレーター
class VisionDataCollator:
    def __init__(self, processor):
        self.processor = processor
    
    def __call__(self, batch):
        # 画像とラベルを分離
        images = [item["image"] for item in batch]
        labels = torch.tensor([item["labels"] for item in batch], dtype=torch.long)
        
        # 画像を処理
        # Gemma3nProcessorを使用して画像をpixel_valuesに変換
        pixel_values = []
        for image in images:
            # ダミーのテキストと組み合わせて処理
            processed = self.processor(
                text="dummy",  # ダミーテキスト
                images=image,
                return_tensors="pt"
            )
            pixel_values.append(processed["pixel_values"].squeeze(0))
        
        pixel_values = torch.stack(pixel_values)
        
        return {
            "pixel_values": pixel_values,
            "labels": labels
        }

# Vision Towerを取得してVisionClassifierを作成
print("🔍 Extracting Vision Tower from model...")

# 直接modelからvision_towerを取得
vision_tower = model.model.vision_tower

# Hidden dimensionを取得
hidden_dim = vision_tower.config.hidden_size if hasattr(vision_tower, 'config') else 3584  # Gemma3nのデフォルト

print(f"Vision Tower: {type(vision_tower)}")
print(f"Hidden dimension: {hidden_dim}")
print(f"Number of classes: {len(class_names)}")

# VisionCNNClassifierを作成
vision_classifier = VisionCNNClassifier(
    vision_model=vision_tower,
    num_classes=len(class_names),
    hidden_dim=hidden_dim
)

# Vision分類用のトレーナーを作成
vision_trainer = VisionTrainer(
    model=vision_classifier,
    tokenizer=tokenizer,
    data_collator=VisionDataCollator(tokenizer),
    train_dataset=train_vision_dataset,
    eval_dataset=val_vision_dataset,
    compute_metrics=compute_vision_metrics,
    callbacks=[ClearMemoryCallback(clear_every_n_steps=50)],
    args=TrainingArguments(
        per_device_train_batch_size=8,  
        per_device_eval_batch_size=16,
        gradient_accumulation_steps=8,  
        warmup_steps=5,
        max_steps=100, # より長い学習で性能向上
        learning_rate=1e-3,  # Vision分類では少し高めのLR
        fp16=not is_bf16_supported(),
        bf16=is_bf16_supported(),
        logging_steps=5,
        logging_strategy="steps",
        logging_first_step=True,
        optim="adamw_8bit",
        weight_decay=0.01,
        lr_scheduler_type="linear",
        seed=3407,
        output_dir="./vision_classification_outputs",
        
        report_to="wandb",
        run_name="gemma3n-vision-classification",
        
        eval_strategy="steps",
        eval_steps=25,
        eval_delay=20,
        
        save_strategy="steps",
        save_steps=50,
        save_total_limit=3,
        load_best_model_at_end=True,
        metric_for_best_model="eval_accuracy",
        greater_is_better=True,
        
        dataloader_pin_memory=False,
        dataloader_num_workers=0,
        remove_unused_columns=False,
    ),
)

print("🚀 Vision Classification Trainer created!")
print(f"📊 Training samples: {len(train_vision_dataset)}")
print(f"📊 Validation samples: {len(val_vision_dataset)}")

# Start Vision Classification Training
vision_trainer.train()

print("🎉 Vision Classification Training completed!")
print(f"💾 Model saved to: ./vision_classification_outputs")
print(f"📝 Model trained with Vision Classification for {len(class_names)} classes")

model_type = "vision_tower_classification"
log_data = {
    "training_status": "completed", 
    "model_type": model_type,
    "num_classes": len(class_names),
    "hidden_dim": hidden_dim
}

# Log training completion to WandB
wandb.log(log_data)

#%%
# Test the model
print("\n🧪 Testing model...")

# Test the vision classifier
test_sample = val_vision_dataset[0]
test_image = test_sample["image"]
test_label = test_sample["labels"]
actual_class = class_names[test_label]

print(f"Testing on: {actual_class} (label: {test_label})")

# Prepare input for vision classifier
with torch.no_grad():
    # Process image using data collator
    batch = vision_trainer.data_collator([test_sample])
    pixel_values = batch["pixel_values"].to("cuda")
    
    # Get prediction
    logits = vision_classifier(pixel_values=pixel_values)
    predicted_class_id = torch.argmax(logits, dim=-1).item()
    predicted_class = class_names[predicted_class_id]
    
    # Get confidence scores
    probabilities = torch.softmax(logits, dim=-1)
    confidence = probabilities[0, predicted_class_id].item()
    
    print(f"Predicted: {predicted_class} (confidence: {confidence:.3f})")

print(f"✅ Vision classification test completed!")
print("=" * 50)

# Test ID/Label conversion functions
print("\n🔧 Testing ID/Label conversion functions...")
print("-" * 50)

# Define conversion functions here for Jupyter compatibility
def id_to_label_local(class_id, class_names_list=None):
    """クラスIDをクラス名に変換"""
    if class_names_list is None:
        class_names_list = class_names
    return class_names_list[class_id]

def ids_to_labels_local(class_ids, class_names_list=None):
    """クラスIDリスト/配列をクラス名リストに変換"""
    if class_names_list is None:
        class_names_list = class_names
    return [class_names_list[id] for id in class_ids]

def get_top_k_predictions_local(logits, k=3, class_names_list=None):
    """logitsからTop-K予測とその確信度を返す"""
    import torch
    
    if class_names_list is None:
        class_names_list = class_names
    
    # logitsが1次元の場合(単一サンプル)は2次元に変換
    if len(logits.shape) == 1:
        logits = logits.unsqueeze(0)
    
    # 確率に変換してTop-K取得
    probs = torch.softmax(logits, dim=-1)
    top_k_probs, top_k_ids = torch.topk(probs, k, dim=-1)
    
    results = []
    for i in range(len(top_k_ids)):
        predictions = []
        for j in range(k):
            class_id = top_k_ids[i][j].item()
            confidence = top_k_probs[i][j].item()
            class_name = class_names_list[class_id]
            predictions.append({
                'class_id': class_id,
                'class_name': class_name,
                'confidence': confidence
            })
        results.append(predictions)
    
    return results

# Test 1: id_to_label function
test_id = predicted_class_id
converted_label = id_to_label_local(test_id)
print(f"📍 Test 1 - id_to_label({test_id}) = '{converted_label}'")

# Test 2: ids_to_labels function
test_ids = [0, 5, 10, predicted_class_id]
converted_labels = ids_to_labels_local(test_ids)
print(f"📍 Test 2 - ids_to_labels({test_ids}):")
for i, label in enumerate(converted_labels):
    print(f"   ID {test_ids[i]} → '{label}'")

# Test 3: get_top_k_predictions function
top3_predictions = get_top_k_predictions_local(logits, k=3)
print(f"📍 Test 3 - Top-3 predictions:")
for i, pred in enumerate(top3_predictions[0]):  # 最初のサンプルのTop-3
    print(f"   {i+1}. {pred['class_name']} (ID: {pred['class_id']}, confidence: {pred['confidence']:.3f})")

print("\n" + "=" * 70)
print("🧠 スマート適応的予測システムのテスト")
print("=" * 70)

# Test smart prediction system
print(f"\n🎯 テスト画像でスマート予測を実行...")
print(f"🖼️ テスト対象: {actual_class}")

# Execute smart prediction
smart_result = smart_predict_image(test_image)

# Display results
print(f"\n📊 スマート予測結果:")
print(f"   使用手法: {smart_result['method']}")
print(f"   理由: {smart_result['reason']}")

if 'prediction' in smart_result:
    print(f"   予測クラス: {smart_result['prediction']}")
    print(f"   信頼度: {smart_result['confidence']:.1%}")
    if 'top_alternatives' in smart_result:
        print("   代替候補:")
        for i, alt in enumerate(smart_result['top_alternatives'][:3], 1):
            print(f"      {i}. {alt['class_name']} ({alt['confidence']:.1%})")

if 'description' in smart_result:
    print(f"   生成された説明: {smart_result['description']}")

if 'vision_response' in smart_result:
    print(f"   Vision判定詳細: {smart_result['vision_response']}")

# 正解と比較
if 'prediction' in smart_result:
    is_correct = smart_result['prediction'] == actual_class
    print(f"\n🎯 予測結果: {'✅ 正解' if is_correct else '❌ 不正解'}")
    print(f"   実際: {actual_class}")
    print(f"   予測: {smart_result['prediction']}")

print("\n" + "=" * 70)

# Display the test image
display(test_image)

print(f"🏷️ Actual class: {actual_class}")
print(f"🔍 Predicted class: {predicted_class}")
print(f"🎯 Confidence: {confidence:.1%}")

# Utility functions for detailed logging
def log_prediction_result(step_name: str, actual_label: str, predicted_label: str, 
                         response_text: str, confidence: float, is_correct: bool,
                         image=None, step_number: int = None):
    """Log detailed prediction result to WandB"""
    log_data = {
        f"{step_name}/actual_label": actual_label,
        f"{step_name}/predicted_label": predicted_label or "None",
        f"{step_name}/response_text": response_text,
        f"{step_name}/confidence": confidence,
        f"{step_name}/is_correct": is_correct,
    }
    
    if step_number is not None:
        log_data[f"{step_name}/step_number"] = step_number
    
    if image is not None:
        log_data[f"{step_name}/test_image"] = wandb.Image(image, caption=f"Actual: {actual_label}")
    
    wandb.log(log_data)

# Import statement moved above with other imports

def update_class_statistics(class_stats: dict, actual_class: str, predicted_class: str, is_correct: bool):
    """Update running class-wise statistics"""
    if actual_class not in class_stats:
        class_stats[actual_class] = {"total": 0, "correct": 0, "predictions": []}
    
    class_stats[actual_class]["total"] += 1
    if is_correct:
        class_stats[actual_class]["correct"] += 1
    class_stats[actual_class]["predictions"].append(predicted_class or "None")
    
    return class_stats

# Enhanced prediction extraction for adaptive approach
def extract_predicted_label(response_text: str, available_classes: list) -> tuple:
    """Extract predicted class from response using text-based matching
    
    Args:
        response_text: Model response text
        available_classes: List of valid class names
        
    Returns:
        tuple: (predicted_class, confidence_score)
    """
    from difflib import SequenceMatcher
    
    response_clean = response_text.strip()
    
    # Exact match (highest confidence)
    for class_name in available_classes:
        if class_name == response_clean:
            return class_name, 0.9
    
    # Case-insensitive exact match
    response_lower = response_clean.lower()
    for class_name in available_classes:
        if class_name.lower() == response_lower:
            return class_name, 0.85
    
    # Substring match
    for class_name in available_classes:
        if class_name in response_clean:
            return class_name, 0.8
        if class_name.lower() in response_lower:
            return class_name, 0.75
    
    # Fuzzy matching for robustness
    best_match = None
    best_score = 0.0
    
    for class_name in available_classes:
        similarity = SequenceMatcher(None, response_lower, class_name.lower()).ratio()
        if similarity > best_score and similarity > 0.6:
            best_score = similarity
            best_match = class_name
    
    if best_match:
        confidence = best_score * 0.7
        return best_match, confidence
    
    # No valid prediction found
    print(f"⚠️ No valid text-based prediction found in response: '{response_clean}'")
    return available_classes[0] if available_classes else None, 0.1

# Already have predicted_class and confidence from vision classifier

# Find examples of the predicted class from original dataset
combined_dataset = train_dataset + val_dataset
predicted_class_samples = [item for item in combined_dataset if item['class'] == predicted_class]

if predicted_class_samples:
    print(f"\n📚 Reference images for '{predicted_class}' (showing 3 examples):")
    print("-" * 50)
    
    # Show up to 3 reference images
    reference_samples = random.sample(predicted_class_samples, min(3, len(predicted_class_samples)))
    
    for i, ref_sample in enumerate(reference_samples, 1):
        ref_image = Image.open(ref_sample["path"])
        if ref_image.mode != 'RGB':
            ref_image = ref_image.convert('RGB')
        
        print(f"Reference {i}: {os.path.basename(ref_sample['path'])}")
        display(ref_image)
        print()
else:
    print(f"❌ No reference images found for '{predicted_class}'")

# Check if prediction is correct
is_correct = (predicted_class == actual_class)
is_partial_match = False  # Not applicable for direct classification

result_emoji = "✅" if is_correct else ("🟡" if is_partial_match else "❌")
accuracy_status = "Exact Match" if is_correct else ("Partial Match" if is_partial_match else "Incorrect")
print(f"{result_emoji} Prediction: {accuracy_status}")

# Log detailed single test result
log_prediction_result(
    step_name="single_test",
    actual_label=actual_class,
    predicted_label=predicted_class,
    response_text=f"Vision classification: {predicted_class}",
    confidence=confidence,
    is_correct=is_correct,
    image=test_image,
    step_number=1
)

# Log to WandB
wandb_log_data = {
    "single_test/test_image": wandb.Image(test_image, caption=f"Test: {actual_class}"),
    "single_test/actual_class": actual_class,
    "single_test/predicted_class": predicted_class,
    "single_test/confidence": confidence,
    "single_test/is_correct": is_correct
}

# Log reference images if available
if predicted_class_samples:
    for j, ref_sample in enumerate(reference_samples[:2], 1):  # Log first 2 reference images
        ref_img = Image.open(ref_sample["path"])
        if ref_img.mode != 'RGB':
            ref_img = ref_img.convert('RGB')
        wandb_log_data[f"single_test/reference_{j}"] = wandb.Image(
            ref_img, 
            caption=f"Ref {j}: {predicted_class}"
        )

wandb.log(wandb_log_data)
wandb.finish()

print(f"\n🎉 Vision classification test completed successfully!")
print(f"Model achieved {confidence:.1%} confidence on the prediction.")

# %%
# Vision classification implementation completed
# - Replaced text generation approach with direct vision classification  
# - Used Vision Tower + Linear classifier
# - Implemented proper data collation and training
# - Added comprehensive testing with confidence scores
# Show all class names for caption generation reference