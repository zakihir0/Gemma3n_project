#%%
# Vision Fine-tuning for plnat Classification - CLAUDE.md Based

!pip uninstall -y pygobject gradient gradient-utils
!pip install --no-cache-dir --upgrade packaging==24.2
!pip install --no-deps bitsandbytes accelerate xformers==0.0.29.post3 peft trl triton cut_cross_entropy unsloth_zoo
!pip install --upgrade bitsandbytes
!pip install triton==3.2.0
!pip install pip3-autoremove
!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124
!pip install unsloth
!pip install faiss-cpu
!pip install sentence-transformers
!pip install wikipedia
!pip install --no-deps git+https://github.com/huggingface/transformers.git
!pip install --no-deps --upgrade timm
!pip uninstall -y deepspeed
!pip install deepspeed==0.14.4
!pip install wandb==0.17.9

#%%
import os
import random
import pandas as pd
import json
from typing import List
from collections import defaultdict
from torchvision import datasets
from unsloth import FastModel, is_bf16_supported, FastVisionModel
from unsloth.trainer import UnslothVisionDataCollator
from trl import SFTTrainer, SFTConfig
import wandb
from PIL import Image
from IPython.display import display, Image as IPImage

os.environ["CUDA_VISIBLE_DEVICES"] = "0, 1"
os.environ["WANDB_API_KEY"] = "abd0ce2837eca439d66f6c603136603c1729cd3e"

#%%
# Initialize WandB with environment variable login
wandb.login(key=os.getenv("WANDB_API_KEY"))

wandb.init(
    project="gemma3n-plant-classification",
    name="vision-finetuning-experiment",
    config={
        "model_name": "unsloth/gemma-3n-E2B-it",
        "max_seq_length": 1024,
        "load_in_4bit": True,
        "max_files_per_class_train": 10000,
        "max_files_per_class_val": 50,
        "max_val_samples_for_sft": 200,
        "lora_rank": 32,
        "lora_alpha": 64,
        "learning_rate": 1e-4,
        "max_steps": 100,
        "eval_steps": 10,
        "per_device_train_batch_size": 8,
        "per_device_eval_batch_size": 16,
        "gradient_accumulation_steps": 8,
    }
)

# Load the model (exactly as in CLAUDE.md)
model, tokenizer = FastModel.from_pretrained(
    model_name = "unsloth/gemma-3n-E2B-it",
    dtype = None,
    max_seq_length = 1024,
    load_in_4bit = True,
    full_finetuning = False,
)

#%%
# Data loading using existing train/valid split
base_dir = '/notebooks/kaggle/input/new_plant_diseases/2/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)'
train_dir = os.path.join(base_dir, 'train')
valid_dir = os.path.join(base_dir, 'valid')

# Dataset size configuration
max_files_per_class_train = 10000  # Training data limit
max_files_per_class_val = 50       # Validation data limit (small for faster evaluation)

print(f"üìä Dataset configuration:")
print(f"   Training: max {max_files_per_class_train} files per class")
print(f"   Validation: max {max_files_per_class_val} files per class")

def load_dataset_from_dir(root_dir, max_files_per_class=None):
    """Load dataset from directory with optional file limit per class"""
    classes = []
    paths = []
    class_file_counts = {}
    
    for dirname, _, filenames in os.walk(root_dir):
        class_name = dirname.split('/')[-1]
        if class_name == os.path.basename(root_dir):  # Skip root directory
            continue
            
        if class_name not in class_file_counts:
            class_file_counts[class_name] = 0
        
        for filename in filenames:
            if max_files_per_class is None or class_file_counts[class_name] < max_files_per_class:
                if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
                    full_path = os.path.join(dirname, filename)
                    if os.path.exists(full_path):
                        classes.append(class_name)
                        paths.append(full_path)
                        class_file_counts[class_name] += 1
    
    return classes, paths, class_file_counts

# Load train and validation datasets separately with different limits
train_classes, train_paths, train_counts = load_dataset_from_dir(train_dir, max_files_per_class_train)
val_classes, val_paths, val_counts = load_dataset_from_dir(valid_dir, max_files_per_class_val)

# Get unified class names from ImageFolder for consistency
train_dataset_folder = datasets.ImageFolder(root=train_dir)
class_names = train_dataset_folder.classes
print(f"Class names: {class_names}")
print(f"Number of classes: {len(class_names)}")

# Create mapping
N = list(range(len(class_names)))
normal_mapping = dict(zip(class_names, N))
reverse_mapping = dict(zip(N, class_names))

# Create train dataset
train_dataset = []
for path, class_name in zip(train_paths, train_classes):
    train_dataset.append({"path": path, "class": class_name})

# Create validation dataset
val_dataset = []
for path, class_name in zip(val_paths, val_classes):
    val_dataset.append({"path": path, "class": class_name})

print(f"Training samples: {len(train_dataset)}")
print(f"Validation samples: {len(val_dataset)}")
print(f"Train class distribution: {train_counts}")
print(f"Val class distribution: {val_counts}")

#%%
# Convert to conversation format using class names directly
class_list_str = "\n".join([f"- {cls}" for cls in class_names])

instruction = f"""You are an expert plant disease classifier. 
Analyze the image and respond with ONLY the exact class name from this list:

{class_list_str}

IMPORTANT: 
- Return exactly one class name from the list above
- Use the exact format shown (including underscores if present)
- Do not add any explanation or additional text
- Example response: Apple___Black_rot"""

print(f"üìù Instruction created with {len(class_names)} classes using direct class names")

def convert_to_conversation(sample):
    try:
        # Load image as PIL Image object instead of path string
        image = Image.open(sample["path"])
        # Convert to RGB if needed (handles RGBA, grayscale, etc.)
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # Use the class name directly as target
        class_name = sample["class"]
        
        conversation = [
            { "role": "user",
              "content" : [
                {"type" : "text",  "text"  : instruction},
                {"type" : "image", "image" : image} ]
            },
            { "role" : "assistant",
              "content" : [
                {"type" : "text",  "text"  : class_name} ]
            },
        ]
        return { "messages" : conversation }
    except Exception as e:
        print(f"‚ùå Error loading image {sample['path']}: {e}")
        return None

#%%
# Convert train and validation datasets to conversation format separately
train_converted_dataset = [convert_to_conversation(sample) for sample in train_dataset]
train_converted_dataset = [item for item in train_converted_dataset if item is not None]
print(f"‚úÖ Converted {len(train_converted_dataset)} training samples to conversation format")

val_converted_dataset = [convert_to_conversation(sample) for sample in val_dataset]
val_converted_dataset = [item for item in val_converted_dataset if item is not None]
print(f"‚úÖ Converted {len(val_converted_dataset)} validation samples to conversation format")

# Additional validation dataset size control for SFT
max_val_samples_for_sft = 200  # Limit validation samples during SFT training
# Note: You can adjust this value based on your needs:
# - Small (50-100): Very fast evaluation, less comprehensive
# - Medium (200-500): Balanced speed and coverage  
# - Large (1000+): More comprehensive but slower
if len(val_converted_dataset) > max_val_samples_for_sft:
    val_converted_dataset = random.sample(val_converted_dataset, max_val_samples_for_sft)
    print(f"‚öôÔ∏è Reduced validation dataset to {len(val_converted_dataset)} samples for SFT efficiency")

# Show sample
print("\nüìã Sample training conversation:")
print(train_converted_dataset[0])

print(f"\nüìä Final dataset split:")
print(f"   Training samples: {len(train_converted_dataset)}")
print(f"   Validation samples: {len(val_converted_dataset)} (optimized for SFT)")
print(f"   Validation ratio: {len(val_converted_dataset)/len(train_converted_dataset):.2%}")

#%%
# Vision Fine-tuning (exactly as in CLAUDE.md)
print("\nüöÄ Starting Vision Fine-tuning...")

# Add PEFT configuration for quantized model
model_SFT = FastVisionModel.get_peft_model(
    model,
    finetune_vision_layers = True,
    finetune_language_layers = True,
    finetune_attention_modules = True,
    finetune_mlp_modules = True,
    r = 32,  # LoRA rank
    lora_alpha = 64,
    lora_dropout = 0,  # Changed from 0.1 to 0 for Unsloth compatibility
    bias = "none",
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj", "vision_embed"],
    random_state = 3407,
    use_gradient_checkpointing = "unsloth",
)

# Enable for training
FastVisionModel.for_training(model_SFT)

# Note: Using standard SFTTrainer for text-based classification

# Create class token sequences for MultiToken SubsetLossTrainer
import torch
import torch.nn.functional as F

class_token_seqs = []  # list of token sequences for each class
class_name_to_seq = {}  # mapping from class name to token sequence

for i, class_name in enumerate(class_names):
    if hasattr(tokenizer, 'tokenizer'):
        actual_tokenizer = tokenizer.tokenizer
        tokens = actual_tokenizer.encode(class_name, add_special_tokens=False)
    elif hasattr(tokenizer, 'encode_text'):
        tokens = tokenizer.encode_text(class_name, add_special_tokens=False)
    elif hasattr(tokenizer, '__call__'):
        result = tokenizer(class_name, add_special_tokens=False, return_tensors="pt")
        tokens = result['input_ids'][0].tolist() if 'input_ids' in result else []
    else:
        tokens = []
    
    if tokens:
        class_token_seqs.append(tokens)
        class_name_to_seq[class_name] = tokens
    else:
        class_token_seqs.append([])

seq_lengths = [len(seq) for seq in class_token_seqs]

class SubsetLossTrainer(SFTTrainer):
    def __init__(self, class_token_seqs, class_name_to_seq, seq_lengths, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.class_token_seqs = class_token_seqs
        self.class_name_to_seq = class_name_to_seq
        self.seq_lengths = torch.tensor(seq_lengths, dtype=torch.float)
        self.num_classes = len(class_token_seqs)

    def compute_loss(self, model, inputs, return_outputs=False, num_items_in_batch=None, **kwargs):
        try:
            labels = inputs["labels"]
            outputs = model(**{k: v for k,v in inputs.items() if k!="labels"})
            logits = outputs.logits
        
            mask = labels.ne(-100)
            B = labels.size(0)
            device = labels.device
            
            target_classes = []
            valid_samples = []
            
            for batch_idx in range(B):
                sample_mask = mask[batch_idx]
                supervised_indices = torch.where(sample_mask)[0]
                
                if len(supervised_indices) == 0:
                    continue
                
                supervised_tokens = labels[batch_idx, supervised_indices].tolist()
                
                target_class = None
                for class_idx, class_seq in enumerate(self.class_token_seqs):
                    if len(class_seq) <= len(supervised_tokens):
                        for start_pos in range(len(supervised_tokens) - len(class_seq) + 1):
                            if supervised_tokens[start_pos:start_pos + len(class_seq)] == class_seq:
                                target_class = class_idx
                                break
                    if target_class is not None:
                        break
                
                if target_class is not None:
                    target_classes.append(target_class)
                    valid_samples.append(batch_idx)
            
            if not valid_samples:
                return outputs.loss if hasattr(outputs, 'loss') else torch.tensor(0.0, requires_grad=True)
            
            log_softmax_logits = F.log_softmax(logits, dim=-1)
            log_prob_sum = torch.zeros(len(valid_samples), self.num_classes, device=device)
            
            for sample_idx, batch_idx in enumerate(valid_samples):
                sample_mask = mask[batch_idx]
                supervised_indices = torch.where(sample_mask)[0]
                
                for class_idx, token_seq in enumerate(self.class_token_seqs):
                    if len(token_seq) == 0:
                        continue
                        
                    class_log_prob = 0.0
                    seq_found = False
                    
                    supervised_tokens = labels[batch_idx, supervised_indices].tolist()
                    for start_pos in range(len(supervised_tokens) - len(token_seq) + 1):
                        if supervised_tokens[start_pos:start_pos + len(token_seq)] == token_seq:
                            for token_idx, token_id in enumerate(token_seq):
                                pos_in_sequence = supervised_indices[start_pos + token_idx]
                                class_log_prob += log_softmax_logits[batch_idx, pos_in_sequence, token_id]
                            seq_found = True
                            break
                    
                    if seq_found:
                        log_prob_sum[sample_idx, class_idx] = class_log_prob
                    else:
                        log_prob_sum[sample_idx, class_idx] = -100.0
            
                seq_lengths_tensor = self.seq_lengths.to(device)
                normalized_scores = log_prob_sum / seq_lengths_tensor.unsqueeze(0)
                
                target_tensor = torch.tensor(target_classes, device=device)
                loss = F.cross_entropy(normalized_scores, target_tensor)
                
                return (loss, outputs) if return_outputs else loss
        except Exception as e:
            print(f"Error in compute_loss: {e}")
            # Fallback to default loss
            return outputs.loss if hasattr(outputs, 'loss') else torch.tensor(0.0, requires_grad=True, device=inputs["labels"].device)

# Create trainer with validation dataset and evaluation settings  
trainer = SubsetLossTrainer(
    class_token_seqs=class_token_seqs,
    class_name_to_seq=class_name_to_seq,
    seq_lengths=seq_lengths,
    model = model_SFT,
    tokenizer = tokenizer,
    data_collator = UnslothVisionDataCollator(model_SFT, tokenizer), # Must use!
    train_dataset = train_converted_dataset,  # Use converted training data
    eval_dataset = val_converted_dataset,     # Use converted validation data
    # Note: compute_metrics removed - focusing on loss monitoring only
    args = SFTConfig(
        per_device_train_batch_size = 8,   # Stable batch size to avoid auto-adjustment
        per_device_eval_batch_size = 4,   # Conservative validation batch size
        gradient_accumulation_steps = 8,  # Maintain effective batch size of 64
        warmup_steps = 10,
        max_steps = 100,  # More steps for meaningful training
        learning_rate = 1e-4,
        fp16 = not is_bf16_supported(),
        bf16 = is_bf16_supported(),
        logging_steps = 1,               # Log every step for detailed monitoring
        logging_strategy = "steps",      # Log based on steps
        logging_first_step = True,       # Log the first step
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "./plant_vision_outputs",
        
        # Enhanced WandB reporting for detailed metrics
        report_to = "wandb",
        run_name = "gemma3n-plant-vision-ft",
        logging_nan_inf_filter = True,   # Filter out NaN/Inf values from logs
        
        # Enhanced loss and metric logging
        log_on_each_node = True,         # Log on each GPU node
        logging_dir = "./plant_vision_outputs/logs",  # Directory for detailed logs
        
        dataloader_pin_memory = False,   # Disable pin memory to avoid conflicts
        dataloader_num_workers = 0,     # Disable multiprocessing to avoid issues
        
        # Evaluation settings for detailed monitoring
        eval_strategy = "steps",         # Enable evaluation
        eval_steps = 25,                 # Evaluate more frequently (every 10 steps)
        eval_delay = 0,                  # Start evaluation immediately
        
        # Save and logging settings
        save_strategy = "steps",         # Save based on steps
        save_steps = 25,                 # Must be multiple of eval_steps (10)
        save_total_limit = 3,            # Keep only last 3 checkpoints
        load_best_model_at_end = True,   # Load best model based on validation loss
        metric_for_best_model = "eval_loss",  # Use validation loss for best model
        greater_is_better = False,       # Lower loss is better
        
        # Additional logging settings
        log_level = "info",              # Set log level to info
        disable_tqdm = False,            # Keep progress bars enabled
        dataloader_drop_last = False,    # Don't drop last incomplete batch

        # You MUST put the below items for vision finetuning (from CLAUDE.md):
        remove_unused_columns = False,
        dataset_text_field = "",
        dataset_kwargs = {"skip_prepare_dataset": True},
        dataset_num_proc = 1,
        max_seq_length = 2048,
    ),
)

# Start training
print("üìà Training started...")
trainer.train()

print("üéâ Training completed!")
print(f"üíæ Model saved to: ./plant_vision_outputs")

print(f"üìù Model trained with standard SFTTrainer for {len(class_names)} classes")
model_type = "standard_sft_text_classification"
log_data = {
    "training_status": "completed", 
    "model_type": model_type,
    "num_classes": len(class_names)
}

# Log training completion to WandB
wandb.log(log_data)

#%%
# Test the model
print("\nüß™ Testing model...")

# Get a test sample and load as PIL Image (use validation dataset)
test_sample = val_dataset[0]
test_image = Image.open(test_sample["path"])
if test_image.mode != 'RGB':
    test_image = test_image.convert('RGB')

test_messages = [{
    "role": "user",
    "content": [
        {"type": "text", "text": instruction},
        {"type": "image", "image": test_image}
    ]
}]

# Generate response
inputs = tokenizer.apply_chat_template(
    test_messages,
    add_generation_prompt=True,
    tokenize=True,
    return_dict=True,
    return_tensors="pt"
).to("cuda")

outputs = model_SFT.generate(
    **inputs,
    max_new_tokens=50,
    temperature=0.7,
    do_sample=True,
    pad_token_id=tokenizer.eos_token_id
)

response_tokens = outputs[0][inputs['input_ids'].shape[1]:]
response = tokenizer.decode(response_tokens, skip_special_tokens=True)

print(f"‚úÖ Test completed!")
print(f"\nüñºÔ∏è Test Image: {os.path.basename(test_sample['path'])}")
print("=" * 50)

# Display the test image
display(test_image)

print(f"üè∑Ô∏è Actual class: {test_sample['class']}")
print(f"üìù Expected response: {test_sample['class']}")
print(f"ü§ñ Model response: {response}")

# Utility functions for detailed logging
def log_prediction_result(step_name: str, actual_label: str, predicted_label: str, 
                         response_text: str, confidence: float, is_correct: bool,
                         image=None, step_number: int = None):
    """Log detailed prediction result to WandB"""
    log_data = {
        f"{step_name}/actual_label": actual_label,
        f"{step_name}/predicted_label": predicted_label or "None",
        f"{step_name}/response_text": response_text,
        f"{step_name}/confidence": confidence,
        f"{step_name}/is_correct": is_correct,
    }
    
    if step_number is not None:
        log_data[f"{step_name}/step_number"] = step_number
    
    if image is not None:
        log_data[f"{step_name}/test_image"] = wandb.Image(image, caption=f"Actual: {actual_label}")
    
    wandb.log(log_data)

# Import statement moved above with other imports

def update_class_statistics(class_stats: dict, actual_class: str, predicted_class: str, is_correct: bool):
    """Update running class-wise statistics"""
    if actual_class not in class_stats:
        class_stats[actual_class] = {"total": 0, "correct": 0, "predictions": []}
    
    class_stats[actual_class]["total"] += 1
    if is_correct:
        class_stats[actual_class]["correct"] += 1
    class_stats[actual_class]["predictions"].append(predicted_class or "None")
    
    return class_stats

# Enhanced prediction extraction for adaptive approach
def extract_predicted_label(response_text: str, available_classes: list) -> tuple:
    """Extract predicted class from response using text-based matching
    
    Args:
        response_text: Model response text
        available_classes: List of valid class names
        
    Returns:
        tuple: (predicted_class, confidence_score)
    """
    from difflib import SequenceMatcher
    
    response_clean = response_text.strip()
    
    # Exact match (highest confidence)
    for class_name in available_classes:
        if class_name == response_clean:
            return class_name, 0.9
    
    # Case-insensitive exact match
    response_lower = response_clean.lower()
    for class_name in available_classes:
        if class_name.lower() == response_lower:
            return class_name, 0.85
    
    # Substring match
    for class_name in available_classes:
        if class_name in response_clean:
            return class_name, 0.8
        if class_name.lower() in response_lower:
            return class_name, 0.75
    
    # Fuzzy matching for robustness
    best_match = None
    best_score = 0.0
    
    for class_name in available_classes:
        similarity = SequenceMatcher(None, response_lower, class_name.lower()).ratio()
        if similarity > best_score and similarity > 0.6:
            best_score = similarity
            best_match = class_name
    
    if best_match:
        confidence = best_score * 0.7
        return best_match, confidence
    
    # No valid prediction found
    print(f"‚ö†Ô∏è No valid text-based prediction found in response: '{response_clean}'")
    return available_classes[0] if available_classes else None, 0.1

class_names = train_dataset_folder.classes
predicted_class, confidence = extract_predicted_label(response, class_names)

print(f"üéØ Prediction confidence: {confidence:.2%}")

if predicted_class:
    print(f"üîç Extracted predicted class: {predicted_class}")
    
    # Find examples of the predicted class (from combined dataset)
    combined_dataset = train_dataset + val_dataset
    predicted_class_samples = [item for item in combined_dataset if item['class'] == predicted_class]
    
    if predicted_class_samples:
        print(f"\nüìö Reference images for '{predicted_class}' (showing 3 examples):")
        print("-" * 50)
        
        # Show up to 3 reference images
        reference_samples = random.sample(predicted_class_samples, min(3, len(predicted_class_samples)))
        
        for i, ref_sample in enumerate(reference_samples, 1):
            ref_image = Image.open(ref_sample["path"])
            if ref_image.mode != 'RGB':
                ref_image = ref_image.convert('RGB')
            
            print(f"Reference {i}: {os.path.basename(ref_sample['path'])}")
            display(ref_image)
            print()
    else:
        print(f"‚ùå No reference images found for '{predicted_class}'")
else:
    print("‚ùì Could not extract a clear class prediction from the response")

# Check if prediction is correct (use exact matching)
is_correct = (predicted_class == test_sample['class']) if predicted_class else False
is_partial_match = test_sample['class'].lower() in response.lower()

result_emoji = "‚úÖ" if is_correct else ("üü°" if is_partial_match else "‚ùå")
accuracy_status = "Exact Match" if is_correct else ("Partial Match" if is_partial_match else "Incorrect")
print(f"{result_emoji} Prediction: {accuracy_status}")

# Log detailed single test result
log_prediction_result(
    step_name="single_test",
    actual_label=test_sample['class'],
    predicted_label=predicted_class,
    response_text=response,
    confidence=confidence,
    is_correct=is_correct,
    image=test_image,
    step_number=1
)

# Log to WandB
wandb_log_data = {
    "single_test/test_image": wandb.Image(test_image, caption=f"Test: {test_sample['class']}"),
    "single_test/actual_class": test_sample['class'],
    "single_test/predicted_response": response,
    "single_test/is_correct": is_correct
}

if predicted_class:
    wandb_log_data["single_test/extracted_class"] = predicted_class
    wandb_log_data["single_test/prediction_confidence"] = confidence
    
    # Log reference images if available
    if predicted_class_samples:
        for j, ref_sample in enumerate(reference_samples[:2], 1):  # Log first 2 reference images
            ref_img = Image.open(ref_sample["path"])
            if ref_img.mode != 'RGB':
                ref_img = ref_img.convert('RGB')
            wandb_log_data[f"single_test/reference_{j}"] = wandb.Image(
                ref_img, 
                caption=f"Ref {j}: {predicted_class}"
            )

wandb.log(wandb_log_data)
wandb.finish()
# %%
