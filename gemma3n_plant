#%%
# Vision Fine-tuning for plnat Classification - CLAUDE.md Based

!pip uninstall -y pygobject gradient gradient-utils
!pip install --no-cache-dir --upgrade packaging==24.2
!pip install --no-deps bitsandbytes accelerate xformers==0.0.29.post3 peft trl triton cut_cross_entropy unsloth_zoo
!pip install --upgrade bitsandbytes
!pip install triton==3.2.0
!pip install pip3-autoremove
!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124
!pip install unsloth
!pip install faiss-cpu
!pip install sentence-transformers
!pip install wikipedia
!pip install --no-deps git+https://github.com/huggingface/transformers.git
!pip install --no-deps --upgrade timm
!pip uninstall -y deepspeed
!pip install deepspeed==0.14.4
!pip install wandb==0.17.9

#%%
import os
import random
import pandas as pd
import json
from typing import List
from collections import defaultdict
from torchvision import datasets
from unsloth import FastModel, is_bf16_supported, FastVisionModel
from unsloth.trainer import UnslothVisionDataCollator
from trl import SFTTrainer, SFTConfig
import wandb
from PIL import Image
from IPython.display import display, Image as IPImage

os.environ["CUDA_VISIBLE_DEVICES"] = "0, 1"
os.environ["WANDB_API_KEY"] = "abd0ce2837eca439d66f6c603136603c1729cd3e"

#%%
# Initialize WandB with environment variable login
wandb.login(key=os.getenv("WANDB_API_KEY"))

wandb.init(
    project="gemma3n-plant-classification",
    name="vision-finetuning-experiment",
    config={
        "model_name": "unsloth/gemma-3n-E2B-it",
        "max_seq_length": 1024,
        "load_in_4bit": True,
        "max_files_per_class_train": 10000,
        "max_files_per_class_val": 50,
        "max_val_samples_for_sft": 200,
        "lora_rank": 32,
        "lora_alpha": 64,
        "learning_rate": 1e-4,
        "max_steps": 300,
        "eval_steps": 30,
        "per_device_train_batch_size": 8,
        "per_device_eval_batch_size": 8,
        "gradient_accumulation_steps": 8,
    }
)

# Load the model (exactly as in CLAUDE.md)
model, tokenizer = FastModel.from_pretrained(
    model_name = "unsloth/gemma-3n-E2B-it",
    dtype = None,
    max_seq_length = 1024,
    load_in_4bit = True,
    full_finetuning = False,
)

#%%
# Data loading using existing train/valid split
base_dir = '/notebooks/kaggle/input/new_plant_diseases/2/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)'
train_dir = os.path.join(base_dir, 'train')
valid_dir = os.path.join(base_dir, 'valid')

# Dataset size configuration
max_files_per_class_train = 10000  # Training data limit
max_files_per_class_val = 50       # Validation data limit (small for faster evaluation)

print(f"📊 Dataset configuration:")
print(f"   Training: max {max_files_per_class_train} files per class")
print(f"   Validation: max {max_files_per_class_val} files per class")

def load_dataset_from_dir(root_dir, max_files_per_class=None):
    """Load dataset from directory with optional file limit per class"""
    classes = []
    paths = []
    class_file_counts = {}
    
    for dirname, _, filenames in os.walk(root_dir):
        class_name = dirname.split('/')[-1]
        if class_name == os.path.basename(root_dir):  # Skip root directory
            continue
            
        if class_name not in class_file_counts:
            class_file_counts[class_name] = 0
        
        for filename in filenames:
            if max_files_per_class is None or class_file_counts[class_name] < max_files_per_class:
                if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
                    full_path = os.path.join(dirname, filename)
                    if os.path.exists(full_path):
                        classes.append(class_name)
                        paths.append(full_path)
                        class_file_counts[class_name] += 1
    
    return classes, paths, class_file_counts

# Load train and validation datasets separately with different limits
train_classes, train_paths, train_counts = load_dataset_from_dir(train_dir, max_files_per_class_train)
val_classes, val_paths, val_counts = load_dataset_from_dir(valid_dir, max_files_per_class_val)

# Get unified class names from ImageFolder for consistency
train_dataset_folder = datasets.ImageFolder(root=train_dir)
class_names = train_dataset_folder.classes
print(f"Class names: {class_names}")
print(f"Number of classes: {len(class_names)}")

# Create mapping
N = list(range(len(class_names)))
normal_mapping = dict(zip(class_names, N))
reverse_mapping = dict(zip(N, class_names))

# Create train dataset
train_dataset = []
for path, class_name in zip(train_paths, train_classes):
    train_dataset.append({"path": path, "class": class_name})

# Create validation dataset
val_dataset = []
for path, class_name in zip(val_paths, val_classes):
    val_dataset.append({"path": path, "class": class_name})

print(f"Training samples: {len(train_dataset)}")
print(f"Validation samples: {len(val_dataset)}")
print(f"Train class distribution: {train_counts}")
print(f"Val class distribution: {val_counts}")

# テキスト指示は不要 - Vision分類では画像のみを使用

#%%
# Vision分類用のデータセット処理
def process_vision_dataset(dataset, dataset_name, class_names):
    """Vision分類用にデータセットを処理（画像とクラスIDのペア）"""
    processed_dataset = []
    normal_mapping = {cls: idx for idx, cls in enumerate(class_names)}
    
    for sample in dataset:
        try:
            # 画像を読み込み
            image = Image.open(sample["path"])
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # クラス名をIDに変換
            class_id = normal_mapping[sample["class"]]
            
            processed_dataset.append({
                "image": image,
                "labels": class_id  # クラスID (int)
            })
            
        except Exception as e:
            print(f"❌ Error processing {dataset_name} sample {sample['path']}: {e}")
    
    return processed_dataset

# Vision分類用データセット作成
train_vision_dataset = process_vision_dataset(train_dataset, "training", class_names)
print(f"✅ Converted {len(train_vision_dataset)} training samples for vision classification")

val_vision_dataset = process_vision_dataset(val_dataset, "validation", class_names)
print(f"✅ Converted {len(val_vision_dataset)} validation samples for vision classification")

# 従来のconversation形式の処理は削除 - Vision分類のみを使用

# Show sample from vision dataset
print("\n📋 Sample vision dataset entry:")
print(f"Image path: {train_vision_dataset[0]['image']}")
print(f"Label: {train_vision_dataset[0]['labels']} (class: {class_names[train_vision_dataset[0]['labels']]})")

print(f"\n📊 Final dataset split:")
print(f"   Training samples: {len(train_vision_dataset)}")
print(f"   Validation samples: {len(val_vision_dataset)}")
print(f"   Validation ratio: {len(val_vision_dataset)/len(train_vision_dataset):.2%}")

#%%
# Vision Fine-tuning (exactly as in CLAUDE.md)
print("\n🚀 Starting Vision Fine-tuning...")

# Add PEFT configuration for quantized model
model_SFT = FastVisionModel.get_peft_model(
    model,
    finetune_vision_layers = True,
    finetune_language_layers = True,
    finetune_attention_modules = True,
    finetune_mlp_modules = True,
    r = 32,  # LoRA rank
    lora_alpha = 64,
    lora_dropout = 0,  # Changed from 0.1 to 0 for Unsloth compatibility
    bias = "none",
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj", "vision_embed"],
    random_state = 3407,
    use_gradient_checkpointing = "unsloth",
)

# Enable for training
FastVisionModel.for_training(model_SFT)

# Note: Using standard SFTTrainer for text-based classification

import torch
import torch.nn.functional as F

import torch.nn as nn
from transformers import Trainer
from torch.utils.data import DataLoader
from transformers.modeling_outputs import SequenceClassifierOutput
import numpy as np
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

class VisionClassifier(nn.Module):
    """Vision Tower + Linear分類器"""
    def __init__(self, vision_model, num_classes, hidden_dim, pooling='mean'):
        super().__init__()
        self.vision_model = vision_model
        self.pooling = pooling
        self.classifier = nn.Linear(hidden_dim, num_classes)
        self.dropout = nn.Dropout(0.1)
        
        # Attention pooling用
        if pooling == 'attention':
            self.attention = nn.MultiheadAttention(hidden_dim, num_heads=8, batch_first=True)
            self.cls_token = nn.Parameter(torch.randn(1, 1, hidden_dim))
    
    def pool_features(self, features):
        """特徴量をプーリングして1ベクトルに集約"""
        # featuresの形状を確認してから処理
        if len(features.shape) == 2:
            # Already pooled features (B, hidden_dim)
            return features
        elif len(features.shape) == 3:
            # features: (B, seq_len, hidden_dim) - Transformer形式
            B, seq_len, hidden_dim = features.shape
            
            if self.pooling == 'mean':
                return features.mean(dim=1)  # (B, hidden_dim)
            
            elif self.pooling == 'cls':
                # 最初のトークンを使用
                return features[:, 0, :]  # (B, hidden_dim)
            
            elif self.pooling == 'attention':
                # CLSトークンを使ったattention pooling
                cls_tokens = self.cls_token.expand(B, -1, -1)  # (B, 1, hidden_dim)
                pooled, _ = self.attention(cls_tokens, features, features)
                return pooled.squeeze(1)  # (B, hidden_dim)
            
            else:
                raise ValueError(f"Unknown pooling method: {self.pooling}")
        elif len(features.shape) == 4:
            # features: (B, channels, height, width) - CNN形式
            B, C, H, W = features.shape
            
            if self.pooling == 'mean':
                # Global Average Pooling
                return features.mean(dim=[2, 3])  # (B, C)
            
            elif self.pooling == 'cls':
                # Use center feature as "cls"
                center_h, center_w = H // 2, W // 2
                return features[:, :, center_h, center_w]  # (B, C)
            
            elif self.pooling == 'attention':
                # Flatten spatial dimensions and apply attention
                features_flat = features.view(B, C, H * W).transpose(1, 2)  # (B, H*W, C)
                cls_tokens = self.cls_token.expand(B, -1, -1)  # (B, 1, C)
                pooled, _ = self.attention(cls_tokens, features_flat, features_flat)
                return pooled.squeeze(1)  # (B, C)
            
            else:
                raise ValueError(f"Unknown pooling method: {self.pooling}")
        else:
            raise ValueError(f"Unexpected feature shape: {features.shape}")
    
    def forward(self, pixel_values, labels=None):
        # Vision Towerから特徴量抽出
        # TimmWrapperModelの場合は直接forwardを呼ぶ
        vision_output = self.vision_model(pixel_values)
        # TimmWrapperModelOutputから実際の特徴量を取得
        vision_features = vision_output.last_hidden_state
        
        
        # プーリングで1ベクトルに集約
        pooled_features = self.pool_features(vision_features)
        pooled_features = self.dropout(pooled_features)
        
        # 分類
        logits = self.classifier(pooled_features)  # (B, num_classes)
        
        loss = None
        if labels is not None:
            loss_fct = nn.CrossEntropyLoss()
            loss = loss_fct(logits, labels)
            
        return SequenceClassifierOutput(
            loss=loss,
            logits=logits,
            hidden_states=None,
            attentions=None
        )

def compute_vision_metrics(eval_pred):
    """Vision分類用の評価メトリクス"""
    predictions, labels = eval_pred
    
    # predictions は logits の形 (batch_size, num_classes)
    pred_ids = np.argmax(predictions, axis=1)
    
    # 基本的なメトリクス
    accuracy = accuracy_score(labels, pred_ids)
    
    # Top-3 accuracy
    top3_preds = np.argsort(predictions, axis=1)[:, -3:]
    top3_accuracy = np.mean([label in top3_preds[i] for i, label in enumerate(labels)])
    
    # クラス別精度 (各クラスのrecall)
    cm = confusion_matrix(labels, pred_ids)
    class_accuracies = cm.diagonal() / cm.sum(axis=1)
    class_accuracies = np.nan_to_num(class_accuracies)  # 0で割った場合のNaNを0に変換
    
    metrics = {
        'accuracy': accuracy,
        'top3_accuracy': top3_accuracy,
        'mean_class_accuracy': np.mean(class_accuracies),
        'min_class_accuracy': np.min(class_accuracies),
        'max_class_accuracy': np.max(class_accuracies),
        'median_class_accuracy': np.median(class_accuracies),
        'std_class_accuracy': np.std(class_accuracies),
    }
    
    # 全クラスの精度を追加
    for i, acc in enumerate(class_accuracies):
        metrics[f'class_{i}_accuracy'] = acc
    
    return metrics

class VisionClassificationTrainer(Trainer):
    """Vision分類用のTrainer"""
    
    def __init__(self, model, class_names, *args, **kwargs):
        super().__init__(model=model, *args, **kwargs)
        self.class_names = class_names
        self.num_classes = len(class_names)
    
    def compute_loss(self, model, inputs, return_outputs=False, **kwargs):
        # pixel_valuesとlabelsを取得
        pixel_values = inputs.get('pixel_values')
        labels = inputs.get('labels')  # クラスIDの形式 (B,)
        
        # モデルの前向き計算
        outputs = model(pixel_values=pixel_values, labels=labels)
        loss = outputs.loss
        
        
        return (loss, outputs) if return_outputs else loss

# ClassCETrainer削除 - Vision分類のみを使用

# Vision分類用のデータコレーター
class VisionDataCollator:
    def __init__(self, processor):
        self.processor = processor
    
    def __call__(self, batch):
        # 画像とラベルを分離
        images = [item["image"] for item in batch]
        labels = torch.tensor([item["labels"] for item in batch], dtype=torch.long)
        
        # 画像を処理
        # Gemma3nProcessorを使用して画像をpixel_valuesに変換
        pixel_values = []
        for image in images:
            # ダミーのテキストと組み合わせて処理
            processed = self.processor(
                text="dummy",  # ダミーテキスト
                images=image,
                return_tensors="pt"
            )
            pixel_values.append(processed["pixel_values"].squeeze(0))
        
        pixel_values = torch.stack(pixel_values)
        
        return {
            "pixel_values": pixel_values,
            "labels": labels
        }

# Vision Towerを取得してVisionClassifierを作成
print("🔍 Extracting Vision Tower from model...")

# PeftModelの階層を辿ってvision_towerを取得
base_model = model_SFT.base_model.model.model  # Gemma3nForConditionalGeneration
# base_model is already Gemma3nModel, so access vision_tower directly
vision_tower = base_model.vision_tower

# Hidden dimensionを取得
hidden_dim = vision_tower.config.hidden_size if hasattr(vision_tower, 'config') else 3584  # Gemma3nのデフォルト

print(f"Vision Tower: {type(vision_tower)}")
print(f"Hidden dimension: {hidden_dim}")
print(f"Number of classes: {len(class_names)}")

# VisionClassifierを作成
vision_classifier = VisionClassifier(
    vision_model=vision_tower,
    num_classes=len(class_names),
    hidden_dim=hidden_dim,
    pooling='mean'  # mean, cls, attention から選択
)

# Vision分類用のトレーナーを作成
vision_trainer = VisionClassificationTrainer(
    model=vision_classifier,
    class_names=class_names,
    tokenizer=tokenizer,
    data_collator=VisionDataCollator(tokenizer),
    train_dataset=train_vision_dataset,
    eval_dataset=val_vision_dataset,
    compute_metrics=compute_vision_metrics,
    args=SFTConfig(
        per_device_train_batch_size=16,  
        per_device_eval_batch_size=16,
        gradient_accumulation_steps=8,  
        warmup_steps=5,
        max_steps=300,  # より長い学習で性能向上
        learning_rate=1e-3,  # Vision分類では少し高めのLR
        fp16=not is_bf16_supported(),
        bf16=is_bf16_supported(),
        logging_steps=5,
        logging_strategy="steps",
        logging_first_step=True,
        optim="adamw_8bit",
        weight_decay=0.01,
        lr_scheduler_type="linear",
        seed=3407,
        output_dir="./vision_classification_outputs",
        
        report_to="wandb",
        run_name="gemma3n-vision-classification",
        
        eval_strategy="steps",
        eval_steps=50,  # 30ステップごとに評価（より多くのステップに対応）
        eval_delay=20,  # 最初の20ステップ後から評価開始
        
        save_strategy="steps",
        save_steps=50,  # eval_stepsと同じ値に設定
        save_total_limit=3,
        load_best_model_at_end=True,
        metric_for_best_model="eval_accuracy",
        greater_is_better=True,
        
        dataloader_pin_memory=False,
        dataloader_num_workers=0,
        remove_unused_columns=False,
    ),
)

print("🚀 Vision Classification Trainer created!")
print(f"📊 Training samples: {len(train_vision_dataset)}")
print(f"📊 Validation samples: {len(val_vision_dataset)}")

# Start Vision Classification Training
print("📈 Vision Classification Training started...")
print("🎯 Using Vision Tower + Linear Classifier approach")
print(f"🔧 Pooling method: {vision_classifier.pooling}")

# Vision分類でトレーニング
vision_trainer.train()

print("🎉 Vision Classification Training completed!")
print(f"💾 Model saved to: ./vision_classification_outputs")

print(f"📝 Model trained with Vision Classification for {len(class_names)} classes")
model_type = "vision_tower_classification"
log_data = {
    "training_status": "completed", 
    "model_type": model_type,
    "num_classes": len(class_names),
    "pooling_method": vision_classifier.pooling,
    "hidden_dim": hidden_dim
}

# Log training completion to WandB
wandb.log(log_data)

#%%
# Test the model
print("\n🧪 Testing model...")

# Test the vision classifier
test_sample = val_vision_dataset[0]
test_image = test_sample["image"]
test_label = test_sample["labels"]
actual_class = class_names[test_label]

print(f"Testing on: {actual_class} (label: {test_label})")

# Prepare input for vision classifier
with torch.no_grad():
    # Process image using data collator
    batch = vision_trainer.data_collator([test_sample])
    pixel_values = batch["pixel_values"].to("cuda")
    
    # Get prediction
    outputs = vision_classifier(pixel_values=pixel_values)
    logits = outputs.logits
    predicted_class_id = torch.argmax(logits, dim=-1).item()
    predicted_class = class_names[predicted_class_id]
    
    # Get confidence scores
    probabilities = torch.softmax(logits, dim=-1)
    confidence = probabilities[0, predicted_class_id].item()
    
    print(f"Predicted: {predicted_class} (confidence: {confidence:.3f})")

print(f"✅ Vision classification test completed!")
print("=" * 50)

# Display the test image
display(test_image)

print(f"🏷️ Actual class: {actual_class}")
print(f"🔍 Predicted class: {predicted_class}")
print(f"🎯 Confidence: {confidence:.1%}")

# Utility functions for detailed logging
def log_prediction_result(step_name: str, actual_label: str, predicted_label: str, 
                         response_text: str, confidence: float, is_correct: bool,
                         image=None, step_number: int = None):
    """Log detailed prediction result to WandB"""
    log_data = {
        f"{step_name}/actual_label": actual_label,
        f"{step_name}/predicted_label": predicted_label or "None",
        f"{step_name}/response_text": response_text,
        f"{step_name}/confidence": confidence,
        f"{step_name}/is_correct": is_correct,
    }
    
    if step_number is not None:
        log_data[f"{step_name}/step_number"] = step_number
    
    if image is not None:
        log_data[f"{step_name}/test_image"] = wandb.Image(image, caption=f"Actual: {actual_label}")
    
    wandb.log(log_data)

# Import statement moved above with other imports

def update_class_statistics(class_stats: dict, actual_class: str, predicted_class: str, is_correct: bool):
    """Update running class-wise statistics"""
    if actual_class not in class_stats:
        class_stats[actual_class] = {"total": 0, "correct": 0, "predictions": []}
    
    class_stats[actual_class]["total"] += 1
    if is_correct:
        class_stats[actual_class]["correct"] += 1
    class_stats[actual_class]["predictions"].append(predicted_class or "None")
    
    return class_stats

# Enhanced prediction extraction for adaptive approach
def extract_predicted_label(response_text: str, available_classes: list) -> tuple:
    """Extract predicted class from response using text-based matching
    
    Args:
        response_text: Model response text
        available_classes: List of valid class names
        
    Returns:
        tuple: (predicted_class, confidence_score)
    """
    from difflib import SequenceMatcher
    
    response_clean = response_text.strip()
    
    # Exact match (highest confidence)
    for class_name in available_classes:
        if class_name == response_clean:
            return class_name, 0.9
    
    # Case-insensitive exact match
    response_lower = response_clean.lower()
    for class_name in available_classes:
        if class_name.lower() == response_lower:
            return class_name, 0.85
    
    # Substring match
    for class_name in available_classes:
        if class_name in response_clean:
            return class_name, 0.8
        if class_name.lower() in response_lower:
            return class_name, 0.75
    
    # Fuzzy matching for robustness
    best_match = None
    best_score = 0.0
    
    for class_name in available_classes:
        similarity = SequenceMatcher(None, response_lower, class_name.lower()).ratio()
        if similarity > best_score and similarity > 0.6:
            best_score = similarity
            best_match = class_name
    
    if best_match:
        confidence = best_score * 0.7
        return best_match, confidence
    
    # No valid prediction found
    print(f"⚠️ No valid text-based prediction found in response: '{response_clean}'")
    return available_classes[0] if available_classes else None, 0.1

# Already have predicted_class and confidence from vision classifier

# Find examples of the predicted class from original dataset
combined_dataset = train_dataset + val_dataset
predicted_class_samples = [item for item in combined_dataset if item['class'] == predicted_class]

if predicted_class_samples:
    print(f"\n📚 Reference images for '{predicted_class}' (showing 3 examples):")
    print("-" * 50)
    
    # Show up to 3 reference images
    reference_samples = random.sample(predicted_class_samples, min(3, len(predicted_class_samples)))
    
    for i, ref_sample in enumerate(reference_samples, 1):
        ref_image = Image.open(ref_sample["path"])
        if ref_image.mode != 'RGB':
            ref_image = ref_image.convert('RGB')
        
        print(f"Reference {i}: {os.path.basename(ref_sample['path'])}")
        display(ref_image)
        print()
else:
    print(f"❌ No reference images found for '{predicted_class}'")

# Check if prediction is correct
is_correct = (predicted_class == actual_class)
is_partial_match = False  # Not applicable for direct classification

result_emoji = "✅" if is_correct else ("🟡" if is_partial_match else "❌")
accuracy_status = "Exact Match" if is_correct else ("Partial Match" if is_partial_match else "Incorrect")
print(f"{result_emoji} Prediction: {accuracy_status}")

# Log detailed single test result
log_prediction_result(
    step_name="single_test",
    actual_label=actual_class,
    predicted_label=predicted_class,
    response_text=f"Vision classification: {predicted_class}",
    confidence=confidence,
    is_correct=is_correct,
    image=test_image,
    step_number=1
)

# Log to WandB
wandb_log_data = {
    "single_test/test_image": wandb.Image(test_image, caption=f"Test: {actual_class}"),
    "single_test/actual_class": actual_class,
    "single_test/predicted_class": predicted_class,
    "single_test/confidence": confidence,
    "single_test/is_correct": is_correct
}

# Log reference images if available
if predicted_class_samples:
    for j, ref_sample in enumerate(reference_samples[:2], 1):  # Log first 2 reference images
        ref_img = Image.open(ref_sample["path"])
        if ref_img.mode != 'RGB':
            ref_img = ref_img.convert('RGB')
        wandb_log_data[f"single_test/reference_{j}"] = wandb.Image(
            ref_img, 
            caption=f"Ref {j}: {predicted_class}"
        )

wandb.log(wandb_log_data)
wandb.finish()

print(f"\n🎉 Vision classification test completed successfully!")
print(f"Model achieved {confidence:.1%} confidence on the prediction.")
# %%
# Vision classification implementation completed
# - Replaced text generation approach with direct vision classification
# - Used Vision Tower + Linear classifier
# - Implemented proper data collation and training
# - Added comprehensive testing with confidence scores
